--- sfunecs_original.c	2010-10-18 16:44:12.000000000 -0400
+++ sfunecs.c	2010-10-18 14:57:11.000000000 -0400
@@ -7,7 +7,8 @@
 #define S_FUNCTION_LEVEL 2
 
 #include "simstruc.h"
-#include <libusb/libusb.h>
+#include <libusb-1.0/libusb.h>
+#include <time.h>
 
 /* Vendor requests */
 #define UPDATE          1
@@ -41,6 +42,9 @@
 double iadcgain[NUDEV];
 double res[NUDEV];
 
+/* start time of simulation*/
+struct timespec ts_start;
+
 static void mdlCheckParameters(SimStruct *S)
 {
     /* Basic check : All parameters must be real positive vectors                            */
@@ -171,6 +175,7 @@
                 err = libusb_open(dev, &dev_handle);
                 udev[nudev++] = dev_handle;
                 if (err) {
+                	printf("Error code = %d\n", err);
                     libusb_free_device_list(list, 1);
         			ssSetErrorStatus(S,"Error encountered opening USB device with Vendor ID = 0x6666 and Product ID = 0x0005."); 
 		          	nudev=-1;
@@ -262,6 +267,9 @@
 
     /* store pointers in PWork so they can be accessed later */
 	PWork[0] = (void*) buffer;
+	
+	/* Save real time at start, so we can use offsets later*/
+	clock_gettime (CLOCK_REALTIME, &ts_start);
 }
 
 /* mdlOutputs - compute the outputs ***********************************************************/
@@ -273,6 +281,28 @@
 	real_T            *y1  = ssGetOutputPortRealSignal(S,0);
 	real_T            *y2  = ssGetOutputPortRealSignal(S,1);
 	InputRealPtrsType up1  = ssGetInputPortRealSignalPtrs(S,0);
+	
+	time_T				simulationTime = ssGetT(S) - ssGetTStart(S);
+	struct timespec ts;
+	
+	time_T realTime;
+	
+	while (1){
+		clock_gettime (CLOCK_REALTIME, &ts);
+		realTime = (ts.tv_sec + ts.tv_nsec / 1e9) - (ts_start.tv_sec + ts_start.tv_nsec / 1e9);
+		double aheadOfSchedule = simulationTime - realTime;
+		if (aheadOfSchedule > 0){
+			int sleepTime = (int) (aheadOfSchedule * 1e6);
+			if (sleepTime > 5000) sleepTime = 5000;
+			//printf("Ahead of schedule by %f. time = %f %f. sleep = %d\n", aheadOfSchedule, realTime, simulationTime, sleepTime);
+			//fflush(stdout);
+			usleep(sleepTime);
+		}else{
+			//printf("Behind schedule by %f. time = %f %f\n", -aheadOfSchedule, realTime, simulationTime);
+			break;
+		}
+	}
+	
 
 	/* get index parameter */
 	int i = (int) (*mxGetPr(ssGetSFcnParam(S,0))+0.3);
